package com.rendonsoft.beerappdemotest.feature.detail.framework.presentation.pageimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.Rowimport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.layout.widthimport androidx.compose.foundation.rememberScrollStateimport androidx.compose.foundation.verticalScrollimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.ArrowBackimport androidx.compose.material3.CenterAlignedTopAppBarimport androidx.compose.material3.CircularProgressIndicatorimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.collectAsStateimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.layout.ContentScaleimport androidx.compose.ui.res.painterResourceimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport coil.compose.AsyncImageimport com.rendonsoft.beerappdemotest.Rimport com.rendonsoft.beerappdemotest.feature.detail.framework.presentation.model.DetailUiStateimport com.rendonsoft.beerappdemotest.feature.detail.framework.presentation.viewModel.DetailViewModelimport com.rendonsoft.beerappdemotest.theme.BeerAppDemoTestThemeimport org.koin.androidx.compose.koinViewModel@OptIn(ExperimentalMaterial3Api::class)@Composablefun DetailScreen(        modifier: Modifier = Modifier,        detailViewModel: DetailViewModel = koinViewModel(),        navigateBack: () -> Unit,) {    val uiState = detailViewModel.detailUiState.collectAsState().value    Scaffold(            modifier = modifier,            topBar = {                CenterAlignedTopAppBar(                        title = {                            Text(text = stringResource(id = R.string.home_toolbar_detail),                                    style = MaterialTheme.typography.titleLarge                                            .copy(                                                    color = MaterialTheme.colorScheme.onSecondary,                                                    fontWeight = FontWeight.Bold                                            ))                        },                        navigationIcon = {                            IconButton(onClick = navigateBack) {                                Icon(                                        imageVector = Icons.Filled.ArrowBack,                                        tint = MaterialTheme.colorScheme.onPrimary,                                        contentDescription = stringResource(R.string.app_name)                                )                            }                        }                )            }    ) {        Box(modifier = Modifier.padding(it)) {            when (uiState) {                is DetailUiState.Data -> {                    Column(                            verticalArrangement = Arrangement.spacedBy(8.dp),                            modifier = Modifier                                    .fillMaxSize()                                    .padding(horizontal = 4.dp)                                    .verticalScroll(rememberScrollState())                    ) {                        Spacer(modifier = Modifier.height(8.dp))                        AsyncImage(                                model = uiState.beer.imageUrl,                                placeholder = painterResource(R.drawable.icon_launch),                                contentDescription = null,                                contentScale = ContentScale.Fit,                                modifier = Modifier                                        .height(400.dp)                                        .fillMaxSize()                        )                        Box(                                modifier = Modifier.fillMaxWidth()                        ) {                            Text(text = uiState.beer.name, style = MaterialTheme.typography.titleLarge.copy(color = MaterialTheme.colorScheme.primary, fontWeight = FontWeight.Bold), modifier = Modifier.align(Alignment.CenterStart))                            Text(text = uiState.beer.firstBrewed, style = MaterialTheme.typography.titleSmall.copy(color = MaterialTheme.colorScheme.primary), modifier = Modifier.align(Alignment.CenterEnd))                        }                        Row {                            Text(text = stringResource(id = R.string.detail_attenuation_level), style = MaterialTheme.typography.bodyMedium.copy(color = MaterialTheme.colorScheme.primary, fontWeight = FontWeight.Bold))                            Spacer(modifier = Modifier.width(16.dp))                            Text(text = uiState.beer.attenuationLevel.toString(), style = MaterialTheme.typography.bodyLarge.copy(color = MaterialTheme.colorScheme.primary))                        }                        Text(text = stringResource(id = R.string.detail_tag_line), style = MaterialTheme.typography.bodyMedium.copy(color = MaterialTheme.colorScheme.primary, fontWeight = FontWeight.Bold))                        Text(text = uiState.beer.tagLine, style = MaterialTheme.typography.bodyLarge.copy(color = MaterialTheme.colorScheme.primary))                        Text(text = stringResource(id = R.string.detail_description), style = MaterialTheme.typography.bodyMedium.copy(color = MaterialTheme.colorScheme.primary, fontWeight = FontWeight.Bold))                        Text(text = uiState.beer.description, style = MaterialTheme.typography.bodyLarge.copy(color = MaterialTheme.colorScheme.primary))                        Text(text = stringResource(id = R.string.detail_contributed_by), style = MaterialTheme.typography.bodyMedium.copy(color = MaterialTheme.colorScheme.primary, fontWeight = FontWeight.Bold))                        Text(text = uiState.beer.contributedBy, style = MaterialTheme.typography.bodyLarge.copy(color = MaterialTheme.colorScheme.primary))                        Spacer(modifier = Modifier.height(16.dp))                    }                }                DetailUiState.Loading -> {                    CircularProgressIndicator(                            color = MaterialTheme.colorScheme.secondary                    )                }            }        }    }}@Preview@Composablefun DetailScreenPreview() {    BeerAppDemoTestTheme {        DetailScreen(navigateBack = {        })    }}