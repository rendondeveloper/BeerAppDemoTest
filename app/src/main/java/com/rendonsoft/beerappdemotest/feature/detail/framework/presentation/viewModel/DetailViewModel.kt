package com.rendonsoft.beerappdemotest.feature.detail.framework.presentation.viewModelimport androidx.lifecycle.SavedStateHandleimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.rendonsoft.beerappdemotest.feature.detail.framework.presentation.model.DetailUiStateimport com.rendonsoft.beerappdemotest.feature.detail.usesCase.GetBeerByIdUsesCaseimport com.rendonsoft.beerappdemotest.feature.navigation.Routesimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.updateimport kotlinx.coroutines.launchclass DetailViewModel(        savedStateHandle: SavedStateHandle,        private val getBeerByIdUsesCase: GetBeerByIdUsesCase) : ViewModel() {    private val _detailUiState: MutableStateFlow<DetailUiState> = MutableStateFlow(DetailUiState.Loading)    val detailUiState: StateFlow<DetailUiState> = _detailUiState    private val beerId: Int = checkNotNull(savedStateHandle[Routes.beerId])    init {        viewModelScope.launch {            getBeerById()        }    }    suspend fun getBeerById() {        viewModelScope.launch(Dispatchers.IO) {            val beer = getBeerByIdUsesCase.invoke(beerId)            _detailUiState.update {                DetailUiState.Data(                        beer = beer                )            }        }    }}