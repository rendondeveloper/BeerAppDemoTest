package com.rendonsoft.beerappdemotest.feature.home.framework.presentation.pageimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Boximport androidx.compose.foundation.layout.Spacerimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.heightimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.material3.Buttonimport androidx.compose.material3.ButtonDefaultsimport androidx.compose.material3.CenterAlignedTopAppBarimport androidx.compose.material3.CircularProgressIndicatorimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.MaterialThemeimport androidx.compose.material3.Scaffoldimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.res.stringResourceimport androidx.compose.ui.text.font.FontWeightimport androidx.compose.ui.tooling.preview.Previewimport androidx.compose.ui.unit.dpimport androidx.paging.LoadStateimport androidx.paging.compose.collectAsLazyPagingItemsimport androidx.paging.compose.itemsimport com.rendonsoft.beerappdemotest.Rimport com.rendonsoft.beerappdemotest.feature.home.framework.presentation.page.widgets.BeerCardimport com.rendonsoft.beerappdemotest.feature.home.framework.presentation.viewModel.HomeViewModelimport com.rendonsoft.beerappdemotest.theme.BeerAppDemoTestThemeimport org.koin.androidx.compose.koinViewModel@OptIn(ExperimentalMaterial3Api::class)@Composablefun HomeScreen(        navigateDetail: (Int) -> Unit,        modifier: Modifier = Modifier,        homeViewModel: HomeViewModel = koinViewModel(),) {    val beers = homeViewModel.homeUiState.collectAsLazyPagingItems()    Scaffold(            modifier = modifier,            topBar = {                CenterAlignedTopAppBar(                        title = {                            Text(text = stringResource(id = R.string.home_toolbar_name),                                    style = MaterialTheme.typography.titleLarge                                            .copy(                                                    color = MaterialTheme.colorScheme.onSecondary,                                                    fontWeight = FontWeight.Bold                                            ))                        },                )            }    ) {        if (beers.loadState.refresh is LoadState.Error) {            Box(modifier = Modifier                    .fillMaxSize()                    .padding(it)            ) {                LazyColumn(                        verticalArrangement = Arrangement.Center,                        horizontalAlignment = Alignment.CenterHorizontally,                        modifier = Modifier                                .align(Alignment.Center)                                .padding(horizontal = 18.dp)                                .fillMaxSize()                ) {                    item { Text(text = stringResource(id = R.string.home_empty_title), style = MaterialTheme.typography.headlineLarge) }                    item { Spacer(modifier = Modifier.height(16.dp)) }                    item { Text(text = stringResource(id = R.string.home_empty_message), style = MaterialTheme.typography.headlineMedium.copy(fontWeight = FontWeight.Bold)) }                    item {                        Button(                                onClick = { beers.retry() },                                colors = ButtonDefaults.buttonColors(containerColor = MaterialTheme.colorScheme.secondary)                        ) {                            Text(text = stringResource(id = R.string.button_re_try),                                    style = MaterialTheme.typography.labelLarge.copy(                                            color = MaterialTheme.colorScheme.onPrimary))                        }                    }                }            }        } else {            LazyColumn(                    horizontalAlignment = Alignment.CenterHorizontally,                    verticalArrangement = Arrangement.spacedBy(8.dp),                    modifier = Modifier                            .padding(it)                            .padding(top = 4.dp)                            .fillMaxSize()) {                items(                        items = beers,                        key = { it.id }                ) {                    it?.let {                        BeerCard(                                data = it,                                onClick = { id ->                                    navigateDetail.invoke(id)                                }                        )                    }                }                when (beers.loadState.refresh) {                    is LoadState.Loading -> {                        item {                            Box(modifier = Modifier                                    .fillMaxSize()                                    .padding(it)) {                                CircularProgressIndicator(                                        color = MaterialTheme.colorScheme.secondary,                                        modifier = Modifier.align(Alignment.Center)                                )                            }                        }                    }                    else -> {}                }                when (beers.loadState.append) {                    is LoadState.Loading -> {                        item {                            CircularProgressIndicator(                                    color = MaterialTheme.colorScheme.secondary                            )                        }                    }                    else -> {}                }            }        }    }}@Preview@Composablefun HomeScreenPreview() {    BeerAppDemoTestTheme {        HomeScreen(modifier = Modifier.fillMaxSize(), navigateDetail = {})    }}