package com.rendonsoft.beerappdemotest.feature.home.framework.presentation.viewModelimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.rendonsoft.beerappdemotest.Rimport com.rendonsoft.beerappdemotest.feature.home.framework.presentation.page.model.HomeUiStateimport com.rendonsoft.beerappdemotest.feature.home.useCases.GetBeersByPageUsesCaseimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.updateimport kotlinx.coroutines.launchclass HomeViewModel(        private  val getBeersByPageUsesCase: GetBeersByPageUsesCase): ViewModel() {    private val _homeUiState: MutableStateFlow<HomeUiState> = MutableStateFlow(HomeUiState.Loading)    val homeUiState: StateFlow<HomeUiState> = _homeUiState    private var page: Int = 1    init {        getBeers()    }    private fun getBeers() {        viewModelScope.launch(Dispatchers.IO) {            val beers = getBeersByPageUsesCase.invoke(page)            if(beers.isNotEmpty()){                _homeUiState.update {                    HomeUiState.Data(                            beers = beers                    )                }            } else {                _homeUiState.update {                    HomeUiState.Empty(                            R.string.home_empty_title,                            R.string.home_empty_message,                            showPullToRefresh = false                    )                }            }        }    }    fun refresh() {        _homeUiState.update {            HomeUiState.Empty(                    R.string.home_empty_title,                    R.string.home_empty_message,                    showPullToRefresh = true            )        }        getBeers()    }    fun getNextScreen() {        page++        viewModelScope.launch(Dispatchers.IO) {            _homeUiState.update {                (it as HomeUiState.Data).copy(shoeLoader = true)            }            val beersData = getBeersByPageUsesCase.invoke(page)            if (beersData.isNotEmpty()) {                _homeUiState.update {                    (it as HomeUiState.Data).let { ui ->                        ui.copy(                                beers = ui.beers + beersData,                                shoeLoader = false                        )                    }                }            } else {                _homeUiState.update {                    HomeUiState.Empty(                            R.string.home_empty_title,                            R.string.home_empty_message,                            showPullToRefresh = false                    )                }            }        }    }}